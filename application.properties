# port
server.port=8088
# database
spring.data.mongodb.uri=mongodb://root:example@localhost:27017/flight_booking?authSource=admin

spring.kafka.producer.bootstrap-servers=localhost:8097,localhost:8098,localhost:8099
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
# all-> strongest durability guarantee, waits for an ack from all insync brokers
spring.kafka.producer.acks=all
##the number of times producer will try to send a message to kafka, if it fails to send it first time
spring.kafka.producer.retries=10
##intervals- wait 1000 ms before send again message
spring.kafka.producer.properties.retry.backoff.ms=1000
#recomanded in documentation
spring.kafka.producer.properties.delivery.timeout.ms=120000
#delivery.timeout>= than sum of below properties
#linger- max time producer will wait and buffer data before sending a batch of messages
spring.kafka.producer.properties.linger.ms=0
spring.kafka.producer.properties.request.timeout.ms=30000
spring.kafka.producer.properties.schema.registry.url=http://127.0.0.1:8081
auto.create.topics.enable=true
#consumer config
spring.kafka.consumer.bootstrap-servers=localhost:8097,localhost:8098,localhost:8099
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=io.confluent.kafka.serializers.KafkaAvroDeserializer
spring.kafka.consumer.group-id=payment-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.kafka.consumer.properties.schema.registry.url=http://127.0.0.1:8081
